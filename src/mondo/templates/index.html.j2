<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>mondo</title>
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .legend tspan {
            padding-left: 10px;
        }

        g.metric .line,
        .key {
            stroke: steelblue;
        }

        g.metric .line {
            fill: none;
            stroke-width: 2px;
        }

        g#load .line#_1m,
        .key._1m {
            opacity: 1.0;
        }

        g#load .line#_5m,
        .key._5m {
            opacity: 0.4;
        }

        g#load .line#_15m,
        .key._15m {
            opacity: 0.133;
        }
    </style>
</head>

<body>
    <script>
        const q = new URLSearchParams(window.location.search);
        if (q.has("help")) {
            console.log("TODO implement a help message");
        }

        // Global constants
        const margin = { top: 20, right: 40, bottom: 20, left: 40 },
            baseUri = "/metrics",
            // Update interval in ms
            duration = {{ context.TICK_DURATION_S * 1000 }};

        // Global parameters
        const
            // Width of each chart
            w = (+q.get("w") || 800) - margin.left - margin.right,
            // Height of each chart
            h = (+q.get("h") || 200) - margin.top - margin.bottom,
            // Number of data points
            n = (+q.get("n") || 60);

        // Enables filtering and ordering of keys per-metric
        const filters = {
            load: ["1m", "5m", "15m"],
            // single-line view for x86 platform
            // temp: ["x86_pkg_temp"],
            // don't show the `foo` metric at all
            // foo: []
        };

        // ref: https://stackoverflow.com/questions/22431751/websocket-how-to-automatically-reconnect-after-it-dies
        function connect(uri, onmessage) {
            let ws = new WebSocket(uri);

            ws.onmessage = onmessage;

            ws.onclose = (ev) => {
                // console.log("Socket is closed. Reconnect will be attempted in 1 second.", ev.reason);
                setTimeout(() => connect(uri, onmessage), duration);
            };

            ws.onerror = (ev, err) => {
                console.log(err);
                // console.error("Socket encountered error:", ev.message, "Closing socket");
                ws.close();
            }
        }

        d3.json(`${baseUri}`).then((metrics) => Object.entries(metrics).map(render));

        function render([name, values]) {
            const uri = `${baseUri}/${name}`;
            const labels = filters[name] || Object.keys(values);
            if (labels.length == 0) return; // we don't have anything to show!

            // NB for our _initial_ scale we're going to "pretend" that it's one
            // second in the past to avoid a 1-second "stutter" of the x-axis
            const then = Date.now() - 1 * duration;
            const data = labels.map((label) => {
                return [{ time: then, value: values[label] }];
            });

            // We want our "window" to hold points 1..n; point 0 will be drawn
            // outside of the window to the left and point n+1 will be drawn outside
            // of the window to the right; flipping that (because, time), we want
            // to clamp the display domain to t-n..t-1
            const x = d3.scaleTime()
                .domain([then - n * duration, then - 1 * duration])
                .range([0, w]);

            const y = d3.scaleLinear()
                .domain([0, 0]) // Initial domain (will update dynamically)
                .range([h, 0]);

            connect(uri, (ev) => {
                const now = Date.now();
                const values = JSON.parse(ev.data);
                labels.map((label, i) => {
                    data[i].push({ time: now, value: values[label] });
                    // pop all the old data points off the front
                    // NB in practice, leaving an extra seconds' worth of data
                    //    points reduces jerkiness/artifacting
                    const earliest = x.domain()[0] - duration;
                    while (data[i].length > 0 && data[i][0].time < earliest) {
                        data[i].shift();
                    }
                });
            });

            // Line generator
            const line = d3.line()
                .curve(d3.curveBasis)
                .x((d) => x(d.time))
                .y((d) => y(d.value))
                .defined(d => !isNaN(d.value)); // Omit NaN values

            // Create SVG
            const svg = d3.select("body").append("svg")
                .attr("width", w + margin.left + margin.right)
                .attr("height", h + margin.top + margin.bottom)
                .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            const legend = svg.append("g")
                .attr("transform", "translate(10)")
                .append("text")
                .attr("class", "legend");

            legend.append("tspan")
                .attr("class", "label")
                .text(`${name}`);

            legend.selectAll(".key")
                .data(labels)
                .join("tspan")
                .attr("class", (d) => `key _${d}`)
                .attr("dx", 10)
                .text((d) => d)
                .on("mouseover", (e, d) => {
                    // Make everything fairly transparent
                    svg.selectAll(".key,.line")
                        .attr("style", "opacity: 0.2");
                    // ...except for the specific one we want to highlight
                    svg.selectAll(`#_${d},._${d}`)
                        .attr("style", "opacity: 1.0");
                })
                .on("mouseout", (e, d) => {
                    svg.selectAll(".key,.line")
                        .attr("style", null);
                });

            // Clipping mask for scrolling effect
            const clip = svg.append("defs").append("clipPath")
                .attr("id", "clip")
                .append("rect")
                .attr("width", w)
                .attr("height", h);

            // X-Axis
            const xAxis = svg.append("g")
                .attr("class", "x-axis")
                .attr("transform", `translate(0, ${h})`)
                .call(d3.axisBottom(x));

            // Y-Axis
            const yAxis = svg.append("g")
                .attr("class", "y-axis")
                .call(d3.axisLeft(y));

            // Container for the lines
            const g = svg.append("g")
                .attr("clip-path", "url(#clip)")
                .append("g")
                .attr("class", "metric")
                .attr("id", `${name}`);

            g.selectAll("path")
                .data(data)
                .join("path")
                .attr("class", "line")
                .attr("id", (d, i) => `_${labels[i]}`)
                .attr("d", line)
                .call(tick, g);

            function tick(paths, g) {
                const now = Date.now();

                // draw the new point
                paths.attr("d", line);

                // reset our transform before adjusting domains
                g.attr("transform", null);

                // adjust the y axis
                y.domain([0, d3.max(data.flat(), d => d.value) * 1.1]);
                yAxis.transition()
                    .duration(duration)
                    .ease(d3.easeLinear)
                    .call(d3.axisLeft(y));

                // adjust the x axis
                x.domain([now - n * duration, now - duration]);
                xAxis.transition()
                    .duration(duration)
                    .ease(d3.easeLinear)
                    .call(d3.axisBottom(x));

                // ... and slide the whole thing to the left
                g.transition()
                    .duration(duration)
                    .ease(d3.easeLinear)
                    .attr("transform", `translate(${x(now - (n + 1) * duration)})`)
                    .on("end", () => tick(paths, g));
            }
        }
    </script>
</body>

</html>